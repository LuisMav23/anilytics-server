name: Deploy Flask App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to AWS EC2 and Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ubuntu
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DYNAMODB_TABLE: ${{ secrets.DYNAMODB_TABLE }}
          RDS_PSQL_HOST: ${{ secrets.RDS_PSQL_HOST }}
          RDS_PSQL_USER: ${{ secrets.RDS_PSQL_USER }}
          RDS_PSQL_PORT: ${{ secrets.RDS_PSQL_PORT }}
          RDS_PSQL_PASS: ${{ secrets.RDS_PSQL_PASS }}
          RDS_PSQL_DB: ${{ secrets.RDS_PSQL_DB }}
        
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            # Stop and remove existing container
            docker stop anilytics_server || true
            docker rm anilytics_server || true
            
            # Remove old image
            docker rmi anilytics_server || true
            
            # Pull latest code
            cd ~/anilytics-server
            git pull origin main
            
            # Create .env file
            echo "GEMINI_API_KEY=${GEMINI_API_KEY}" > .env
            echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env
            echo "AWS_REGION=${AWS_REGION}" >> .env
            echo "DYNAMODB_TABLE=${DYNAMODB_TABLE}" >> .env
            echo "RDS_PSQL_HOST=${RDS_PSQL_HOST}" >> .env
            echo "RDS_PSQL_USER=${RDS_PSQL_USER}" >> .env
            echo "RDS_PSQL_PORT=${RDS_PSQL_PORT}" >> .env
            echo "RDS_PSQL_PASS=${RDS_PSQL_PASS}" >> .env
            echo "RDS_PSQL_DB=${RDS_PSQL_DB}" >> .env
            
            # Build new Docker image
            docker build -t anilytics_server .
            
            # Run the new container with the .env file
            docker run -d -p 80:5000 --env-file .env --name anilytics_server anilytics_server
          EOF
