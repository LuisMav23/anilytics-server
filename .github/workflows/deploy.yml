name: Deploy Flask App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Deploy to AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ubuntu
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DYNAMODB_TABLE: ${{ secrets.DYNAMODB_TABLE }}
          RDS_PSQL_HOST: ${{ secrets.RDS_PSQL_HOST }}
          RDS_PSQL_USER: ${{ secrets.RDS_PSQL_USER }}
          RDS_PSQL_PORT: ${{ secrets.RDS_PSQL_PORT }}
          RDS_PSQL_PASS: ${{ secrets.RDS_PSQL_PASS }}
          RDS_PSQL_DB: ${{ secrets.RDS_PSQL_DB }}

        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            set -e  # Exit immediately if a command fails
            
            # Stop and remove existing container if running
            docker stop anilytics_server || true
            docker rm -f anilytics_server || true
            
            # Remove old image if exists
            docker rmi -f anilytics_server || true
            
            # Pull latest code
            cd ~/anilytics-server
            git checkout main
            git pull origin main
            
            # Export secrets before writing .env file
            export GEMINI_API_KEY="${GEMINI_API_KEY}"
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_REGION="${AWS_REGION}"
            export DYNAMODB_TABLE="${DYNAMODB_TABLE}"
            export RDS_PSQL_HOST="${RDS_PSQL_HOST}"
            export RDS_PSQL_USER="${RDS_PSQL_USER}"
            export RDS_PSQL_PORT="${RDS_PSQL_PORT}"
            export RDS_PSQL_PASS="${RDS_PSQL_PASS}"
            export RDS_PSQL_DB="${RDS_PSQL_DB}"

            # Create .env file
            cat <<EOT > .env
            GEMINI_API_KEY=${GEMINI_API_KEY}
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            AWS_REGION=${AWS_REGION}
            DYNAMODB_TABLE=${DYNAMODB_TABLE}
            RDS_PSQL_HOST=${RDS_PSQL_HOST}
            RDS_PSQL_USER=${RDS_PSQL_USER}
            RDS_PSQL_PORT=${RDS_PSQL_PORT}
            RDS_PSQL_PASS=${RDS_PSQL_PASS}
            RDS_PSQL_DB=${RDS_PSQL_DB}
            EOT
            
            # Build and run new container
            docker build -t anilytics_server .
            docker run -d -p 80:5000 --env-file .env --name anilytics_server anilytics_server
          EOF
